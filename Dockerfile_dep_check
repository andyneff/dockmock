FROM centos:7

RUN yum install -y yum-utils rpmdevtools

RUN mkdir -p $HOME/rpmbuild/{RPMS,SRPMS,SOURCES,SPECS}

COPY repos /repos
COPY gpg /gpg

RUN printf '[rpmdocker]\nname=rpmdocker\nbaseurl=file:///home/dev/rpmbuild/RPMS\ngpgcheck=0\nenabled=1\nmetadata_expire=0\nmetadata_expire_filter=never\n' > \
           /etc/yum.repos.d/rpmdocker.repo && \
    (cp -n /repos/* /etc/yum.repos.d/ || :) && \
    (cp -n /gpg/* /etc/pki/rpm-gpg/ || :)

RUN yum makecache -y --disablerepo=rpmdocker && : [{CLEAR_CACHE:0}]
#My hope is this makes using this docker quicker. This image should be purged 
#from docker's image repository periodically to keep the cache up to day, every
#x days???

#CMD cat - > /dev/shm/rpm.spec && yum-builddep --nogpgcheck --assumeno /dev/shm/rpm.spec

COPY source /root/rpmbuild/SOURCES
#This is REALLY only needed for common.inc or similar... Unfortunately there is
#no way of knowing the difference between THAT and binary source files... Oh 
#well. I will accept this inefficiency and carry on.

COPY deplist.py /deplist.py

CMD sed 's|%%|%%%%|g' > $HOME/rpmbuild/SPECS/rpm_preparse.spec && \
    #Read the first line of stdin into rpmbuild_args, and the rest goes into the spec file
    #%% need to be convered to %%% becuase rpmspec will unescape escaped characters. This
    #reescapes them and hopefully NOTHING GOES WRONG! :-\
    set -o pipefail && \
    #catch failing grep/seds... they shouldn't be, this helps with debug only, of course
    eval "RPMBUILD_ARGS=(${RPMBUILD_ARGS})" && \
    rpmspec "${RPMBUILD_ARGS[@]}" -D "debug_package %{nil}" -P $HOME/rpmbuild/SPECS/rpm_preparse.spec > $HOME/rpmbuild/SPECS/rpm.spec && \
    #parse the spec file, debug_package must be disabled or else two debug packages will be made, and fail
    spectool -g -n -A -C $HOME/rpmbuild/SOURCES $HOME/rpmbuild/SPECS/rpm.spec | \
      ( grep '^Getting' || : ) | sed 's/.* to \(.*\)/\1/' | \
        while IFS='' read -r filename || [ -n "${filename}" ]; do \
          truncate -s 20 "${filename}"; \
        done && \
    #ask spectool which source/patch files are urls, and creating fake missing source files
    srpm_name=$(rpmbuild -bs $HOME/rpmbuild/SPECS/rpm.spec | \
          grep "^Wrote: " | sed 's/Wrote: \(.*\)/\1/') && \
    /deplist.py /deps.txt /local_deps.txt ${srpm_name} && \
    if [ "${DOCKRPM_BASH}" == "1" ]; then bash; fi
