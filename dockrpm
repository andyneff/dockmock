#!/usr/bin/env python

import os
import types
import shutil
from subprocess import Popen as Popen_orig, PIPE, STDOUT
from glob import glob
import datetime
import re
import tempfile
try:
  from shlex import quote
except:
  from pipes import quote
import json
import logging

from distutils.version import LooseVersion, StrictVersion
from distutils.dir_util import mkpath, copy_tree
from distutils.spawn import find_executable as which

import argparse_dissect as argparse

from vsi import PopenRedirect, LoggerFile

class Popen(Popen_orig):
  def __init__(self, *args, **kwargs):
    if args:
      self.cmd=args[0]
    else:
      self.cmd=kwargs['args']
    #print self.cmd
    super(Popen, self).__init__(*args, **kwargs)

  def wait(self, desired_rv=None):
    rv = super(Popen, self).wait()
    if desired_rv is not None and desired_rv != rv:
      raise Exception('Expected exit code %d but got %d for %s' % (desired_rv,
                                                                   rv,
                                                                   self.cmd))
    return rv

def find_nvcc():
  nvcc = which('nvcc')
  if nvcc is None:
    nvcc = '/usr/local/cuda/bin/nvcc'
  return nvcc

def test_version(version1, version2, test):
  try:
    v1 = StrictVersion(version1)
    v2 = StrictVersion(version2)
  except:
    v1 = LooseVersion(version1)
    v2 = LooseVersion(version2)

  if test=='=':
    return v1==v2
  elif test=='<':
    return v1<v2
  elif test=='>':
    return v1>v2
  elif test=='<=':
    return v1<=v2
  elif test=='>=':
    return v1>=v2
  else:
    raise Exception('Unexpected logic test %s' % test)

def dependencies_from_yum_builddep(output):
  dependencies = filter(lambda x: x.startswith(' --> '), output.splitlines())
  dependencies = map(lambda x: x.split()[-1], dependencies)
  dependencies.sort()
  return dependencies

def parser():
  my_parser = argparse.ArgumentParser()
  aa = my_parser.add_argument
  aa('spec',
     help='''Name of spec. Can be just myfile or path (./specs/myfile.spec) or
             directory (./blah/myfile, for ./blah/myfile/myfile.spec')''')
  aa('--fake', nargs='?', const=True, default=False, type='bool', 
     help='Create a fake spec')
  aa('--fake-version', default='1.0.0', help="Fake version number")
  aa('--fake-arch', default=None, help="Fake arch")
  aa('--dep-check', default=True, type='bool',
     help='Skip dependency checking')
  aa('--docker-dep-check', default=False, action='store_true',
     help='''Check dependencies in a docker. Necessary to be run at least once 
             to create deps.txt, unless you create it manually''')
  aa('--root-dir', default=None, help='Change root dir')
  aa('--mount-repo', default=None, help='emptystring to disable')
  aa('--mount-gpg', default=None, help='empty string to disable')
  aa('--bash', default=False, action='store_true', 
     help='Run bash instead of rpmbuild')
  aa('--nvcc', default=find_nvcc())
  aa('--cuda-version')
  aa('--nvidia-version')
  aa('--debug-on-fail', default=None, type='bool', const=True, nargs='?',
     help='''Commit and enter a container when the rpmbuild step fails. Default
     is to be prompted to enter''')
  #aa('--quiet', default=False, type='bool', const=True, nargs='?')
  aa('--skip-build', default=False, type='bool', const=True, nargs='?')
  aa('--skip-run', default=False, type='bool', const=True, nargs='?')
  aa('--with', default=[], action='append', 
     help='Args for rpmbuild, not sent to recursive builds')
  aa('--without', default=[], action='append',
     help='Args for rpmbuild, not sent to recursive builds')
  aa('--verbose', '-v', default=4, type=int, choices=range(6), nargs='?', const=5,
     help='''Logging level between 0 and 5, 5 is most verbose, 0 is none 
             (no output). Default: 4''')
  aa('--uid', default=None, type=int,
     help='''UID for the user in the docker. Default is to use the users
             UID or 1000 for windows''')
  aa('--gid', default=None, type=int,
     help='''GID for the user in the docker. Default is to use the users
             GID or 50 for windows''')

  return my_parser

def cmd_to_str(cmd):
  return ' '.join([quote(x) for x in cmd])

def same_file(filename1, filename2):
  if os.name == 'nt':
    return False #I can't check ;(
  else:
    return os.path.samefile(filename1, filename2)

def translate_path(ntpath):
  path = os.path.splitdrive(ntpath)
  return '/'.join(['', path[0].strip(':').lower()] + path[1].lstrip('\\').split('\\'))

class DockRpm(object):
  SPEC_DIR='specs'
  RPM_DIR='rpms'
  SRPM_DIR='srpms'
  SOURCE_DIR='source'
  REPO_DIR='repos'
  GPG_DIR='gpg'
  
  def __init__(self, args=None):
    self.argv = args
    self.parser = parser()
    
    (self.args, self.extra_args) = self.parser.parse_known_args(args)
    
    self.rpmbuild_args = [entry for value in self.args.without 
                                for entry in ['--without', value]] + \
                         [entry for value in getattr(self.args, 'with')
                                for entry in ['--with', value]]
    #Oh the fun of having to know I need to quote/escape here... 

    self.code_dir = os.path.abspath(os.path.dirname(__file__))
    if self.args.root_dir:
      self.root_dir = os.path.abspath(self.args.root_dir)
    else:
      self.root_dir = self.code_dir

    # Determine path info
    self.specs_dir = os.path.join(self.root_dir, self.SPEC_DIR)

    self.spec_path = self.spec_path_from_arg(self.args.spec)
    self.spec_dir = os.path.abspath(os.path.dirname(self.spec_path))

    if os.name == 'nt':
      #Fix a stupid bug with docker that can't find c:\ but can C:\
      #https://github.com/docker/docker/issues/13898
      self.root_dir = os.path.splitdrive(self.root_dir)
      self.spec_dir = os.path.splitdrive(self.spec_dir)
      self.root_dir = self.root_dir[0].upper()+self.root_dir[1]
      self.spec_dir = self.spec_dir[0].upper()+self.spec_dir[1]

    self.spec_basename = os.path.basename(self.spec_path)
    self.spec_name = os.path.splitext(self.spec_basename)[0]

    self.rpm_dir = os.path.abspath(os.path.join(self.root_dir, self.RPM_DIR))
    self.srpm_dir = os.path.abspath(os.path.join(self.root_dir, self.SRPM_DIR))
    self.source_dir = os.path.abspath(os.path.join(self.spec_dir, self.SOURCE_DIR))
    self.repo_dir = os.path.abspath(os.path.join(self.spec_dir, self.REPO_DIR))
    self.gpg_dir = os.path.abspath(os.path.join(self.spec_dir, self.GPG_DIR))
   
    self.common_inc = os.path.join(self.specs_dir, 'common.inc')
    #Should this be args.root_dir or code_dir??? I'm not sure yet
    
    self.dockerfile = os.path.join(self.spec_dir, 'Dockerfile_build')
    self.dockerfile_dep_check = os.path.join(self.spec_dir, 
                                             'Dockerfile_dep_check')
    self.dockerfile_other = os.path.join(self.spec_dir, 
                                             'Dockerfile_other')
    self.dockerfile_other_built = False
    self.dockerfile_other_imagename = 'dockrpm_%s_other' % self.spec_name

    self.curl_script_path = os.path.join(self.spec_dir, 'curl.bsh')
    self.rpmmacros_path = os.path.join(self.spec_dir, 'rpmmacros')

    self.logger = logging.getLogger(__name__)
    self.log_level = (6-self.args.verbose)*10 #(10-60)

    #MINGW fun
    #There are THREE paths passed to docker -v flags, they need to be 
    #translated incase boot2docker is used (Mingw32/64)

    if os.name=='nt':
      self.rpm_dir_docker = translate_path(self.rpm_dir)
      self.srpm_dir_docker = translate_path(self.srpm_dir)
      self.spec_path_docker = translate_path(self.spec_path)
      self.source_dir_docker = translate_path(self.source_dir)
    else:
      self.rpm_dir_docker = self.rpm_dir
      self.srpm_dir_docker = self.srpm_dir
      self.spec_path_docker = self.spec_path
      self.source_dir_docker = self.source_dir

    if not os.path.exists(self.spec_dir):
      mkpath(self.spec_dir)

    if self.args.uid is not None:
      self.uid = self.args.uid
    elif os.name=='nt':
      self.uid = 1000 #Default in boot2docker
    else:
      self.uid = os.getuid()

    if self.args.gid is not None:
      self.gid = self.args.gid
    elif os.name=='nt':
      self.gid = 50 #Default in boot2docker
    else:
      self.gid = os.getgid()

    if same_file(self.spec_dir, self.root_dir):
      self.logger.critical('If the spec dir and the root dir are the same, bad things can happen')
      exit(1)
    if same_file(self.spec_dir, self.code_dir):
      self.logger.critical('If the spec dir and the code dir are the same, bad things can happen')
      exit(1)

    
  def get_rpm_names_from_specfile(self, spec_path):
    cmd = ['rpm', '-q', '-D', '_sourcedir %s' % self.source_dir, 
           '--qf', '%{NAME}\t%{VERSION}\n', '--specfile', spec_path]
    pid = Popen(cmd, stdout=PIPE)
    stdout = pid.communicate()[0][:-1] #get rid of trailing newline
    pid.wait(0)
    return map(lambda x:x.split('\t'), stdout.splitlines())

  def search_local(self, package_info, package_name_suffix='_local'):
    local_pacakge_name = package_info[0].split('-')
    local_pacakge_names = ['-'.join(local_pacakge_name[0:x] + 
                          [local_pacakge_name[x]+package_name_suffix] + 
                          local_pacakge_name[x+1:]) 
                          for x in range(len(local_pacakge_name))]
    #I've thought about this for a while, there's no way I can determine where
    #the prefix should be added. So I just try them all, and check them all
    #example
    #[mylibrary_local, mylibrary_local-devel]
    #but what if it was my-library? then I need to check
    #[my_local-library, my-library_local, my_local-library-devel, 
    # my-library_local-devel]
    #This should work best... Hopefully no false positives.
    local_pacakge_names = [local_pacakge_name] + local_pacakge_names
    #Add it without the suffix, in the case that the suffix is already added in
    #the spec file. This is the case I want supported in the end

    for spec in glob(os.path.join(self.specs_dir, '*', '*.spec')):
      rpm_names = self.get_rpm_names_from_specfile(spec)
      for rpm_name in rpm_names:
        if package_info[0] == rpm_name[0] or \
           any([x == rpm_name[0] for x in local_pacakge_names]):
          if len(package_info)==1:
            return spec
          elif len(package_info)==3:
            if test_version(rpm_name[1], package_info[2], package_info[1]):
              return spec
          else:
            raise Exception('Unexpected package descriptor %s' % missing_package)

  def spec_path_from_arg(self, arg):
    arg_parts = os.path.split(arg)
    if arg_parts[0]: #has path in it
      if self.args.fake:
        if os.path.splitext(arg)[1]==os.path.extsep+'spec': #has extension
          spec_name = os.path.abspath(arg)
        else:
          spec_name = os.path.basename(arg)
          spec_name = os.path.abspath(os.path.join(arg, 
              os.path.extsep.join((spec_name, 'spec'))))
      else:
        if os.path.isdir(arg):
          spec_name = os.path.basename(arg)
          spec_name = os.path.abspath(os.path.join(arg, 
              os.path.extsep.join((spec_name, 'spec'))))
        else:
          spec_name = os.path.abspath(arg)
    else: #just name
      if os.path.splitext(arg)[1]==os.path.extsep+'spec': #has extension
        spec_name = os.path.join(self.specs_dir, os.path.splitext(arg)[0], arg)
      else: #no extension
        spec_name = os.path.join(self.specs_dir, arg, 
                                 os.path.extsep.join((arg, 'spec')))

    if not self.args.fake:
      assert os.path.isfile(spec_name), '%s does not exist' % spec_name
    else:
      assert not os.path.isfile(spec_name), \
             '%s does exists for fake' % spec_name

    return spec_name

  def create_fake(self):
    ''' Create a fake spec file '''

    if os.path.exists(self.spec_path):
      raise Exception("%s already exits, remove it or don't use --fake" % \
                      self.spec_path)
    mkpath(os.path.dirname(self.spec_path))
    with open(self.spec_path, 'wb') as fid:
      fid.writelines(['Name: %s\n' % os.path.splitext(os.path.basename(self.spec_path))[0],
                      "License: None\n",
                      "Group: Misc\n",
                      "Summary: Fake rpm\n",
                      "Version: %s\n" % self.args.fake_version,
                      "Release: 1%{?dist}\n"])
      if self.args.fake_arch:
        fid.write("BuildArch: %s\n" % self.args.fake_arch)
      fid.writelines(["%description\n",
                      "Fake Rpm\n",
                      "%files\n"])

  def dockerp(self, input_file, output_file, additional_env, inherit_env=True):
    if inherit_env:
      env = dict(os.environ)
    else:
      env = {}
    env.update(additional_env)

    if isinstance(input_file, types.StringTypes):
      input_file = open(input_file, 'r')
    if isinstance(output_file, types.StringTypes):
      if os.path.isdir(output_file):
        output_file = NamedTemporaryFile(delete=False, dir=output_file)
      else:
        output_file = open(output_file, 'w')

    cmd = [os.path.join(self.code_dir, 'docker+.bsh')]
    if os.name=='nt':
      cmd = ['bash'] + cmd

    self.logger.debug(cmd_to_str(cmd))
    Popen(cmd, 
          stdin=input_file, stdout=output_file, env=env).wait(0)

    return output_file
    
  def setup(self):

    if self.log_level <= logging.CRITICAL:
      sh = logging.StreamHandler()
      #fh = logging.FileHandler('build.log')
      sh.setLevel(self.log_level)
      #fh.setLevel(logging.DEBUG)
      formatter = logging.Formatter('%(asctime)s : %(levelname)s - %(message)s')
      sh.setFormatter(formatter)
      #fh.setFormatter(formatter)
      self.logger.addHandler(sh)
      #logger.addHandler(fh)
      self.logger.setLevel(self.log_level)
    else:
      if not self.logger.handlers:
        #Suppress any "no handler available" message
        self.logger.addHandler(logging.NullHandler())

    # Prep extra files
    if self.args.fake:
      self.create_fake()

    mkpath(self.rpm_dir)
    mkpath(self.srpm_dir)
    mkpath(self.source_dir)
    mkpath(self.repo_dir)
    mkpath(self.gpg_dir)

    if self.args.mount_repo is None:
      if os.name=='nt':
        self.mount_repo = self.repo_dir #null case really
      else:
        self.mount_repo = '/etc/yum.repos.d'

    if self.args.mount_gpg is None:
      if os.name=='nt':
        self.mount_repo = self.gpg_dir #null case really
      else:
        self.mount_gpg = '/etc/pki/rpm-gpg'

    if self.args.mount_repo:
      copy_tree(self.args.mount_repo, self.repo_dir)
    if self.args.mount_gpg:
      copy_tree(self.args.mount_gpg, self.gpg_dir)

    if os.path.exists(self.common_inc):
      shutil.copy(self.common_inc, self.source_dir)
      #should this always overwrite? or never? or something inbetween?
    
    self.dockerp(os.path.join(self.code_dir, 'Dockerfile_dep_check'),
                 self.dockerfile_dep_check,
                 {'CLEAR_CACHE':str(datetime.date.today().toordinal()/5),
                  'RPMBUILD_ARGS':' '.join(self.rpmbuild_args)})
    #Clear the yum cache every 5 days, this forces docker to create a new image

    # Prep repo
    if not os.path.exists(os.path.join(self.rpm_dir, 'repodata', 
                                       'repomd.xml')) or \
       not os.path.exists(os.path.join(self.srpm_dir, 'repodata', 
                                       'repomd.xml')):
      self.run_create_repo()

  def build_check_dependencies_image(self, image_name):
    ### Build Dep Check image
    self.logger.info('Building dependency checking docker')
    cmd = ['docker', 'build', '-t', image_name, 
           '-f', self.dockerfile_dep_check, self.spec_dir]
    self.logger.debug(cmd_to_str(cmd))
    with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
      Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait(0)

  def run_check_dependencies_image(self, image_name):
    ### Run Dep Check
    self.logger.info('Checking dependencies for %s' % self.spec_path)

    try:
      #Run yum-builddep
      with open(self.spec_path, 'r') as fid:
        docker_input = ' '.join(self.rpmbuild_args)+'\n' + fid.read()
      #The input to this docker is a line of rpmbuild args (--with/out, etc)
      #plus the spec file 

      cmd = ['docker', 'run', '-i', '--rm',
             '-v', '%s:/home/dev/rpmbuild/RPMS' % self.rpm_dir_docker,
             '-v', '%s:/home/dev/rpmbuild/SRPMS' % self.srpm_dir_docker,
             image_name]
      self.logger.debug(cmd_to_str(cmd))
      pid = Popen(cmd, stdin=PIPE, stdout=PIPE)
      #inject the --with/without/etc... options into the docker as the first line of stdin

      stdout = pid.communicate(docker_input)[0]
      pid.wait(0)
      
      dependencies = dependencies_from_yum_builddep(stdout)
      dependencies.sort()
      with open(os.path.join(self.spec_dir, 'deps.txt'), 'wb') as fid:
        fid.write('\n'.join(dependencies))

      ###Scan for missing packages
      missing_packages = []
      error_message = 'Error: No Package found for '
      for line in stdout.splitlines():
        if line.startswith(error_message):
          missing_packages.append(line[len(error_message):])

      ### Scan if local packages satisfy missing pacakges
      for missing_package in missing_packages:
        package_info = re.split('\s*([<=>]+)\s*', missing_package)
        match = self.search_local(package_info)
        if match:
          #Rerun the whole thing on each new dependency matched
          self.logger.warning('Building local dependency %s' % missing_package)
          #remove the spec name from the arg list and add the dependency to the 
          #arg list instead
          dep_args = [match] + argparse.filter_args(self.args, None, 
                                                    ['spec', 'with', 'without'])
          DockRpm(dep_args).main()
        else:
          raise Exception('No match for package %s' % missing_package)
    except:
      self.logger.critical('Error running dep_check. To run the docker, try:')
      self.logger.info('(echo %s; cat %s ) | %s' % \
            (cmd_to_str(self.rpmbuild_args), self.spec_path, 
             cmd_to_str(cmd)))
      self.logger.info('To debug, try:')
      cmd = cmd[0:2] + ['-t', '-v', '%s:/root/rpmbuild/SPECS/rpm_preparse.spec' % self.spec_path_docker] + cmd[2:] + ['bash']
      self.logger.info(cmd_to_str(cmd))
      self.logger.info('Then in the docker, run (without the cat portion)')
      pid = Popen(['docker', 'inspect', '-f', '{{json .Config.Cmd}}', image_name], stdout=PIPE)
      cmd = json.loads(pid.communicate()[0])
      self.logger.info(cmd_to_str(cmd))
      raise


  def build_other_image(self):
    ### Build Other image
    if self.dockerfile_other_built:
      return

    self.logger.info('Building other docker')

    docker_env = {'USER_UID': str(self.uid), 'USER_GID': str(self.gid)}

    self.dockerp(os.path.join(self.code_dir, 'Dockerfile_other'),
                 self.dockerfile_other,
                 docker_env)

    cmd = ['docker', 'build', '-t', self.dockerfile_other_imagename, 
           '-f', self.dockerfile_other, self.spec_dir]
    self.logger.debug(cmd_to_str(cmd))
    with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
      Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait(0)
    self.dockerfile_other_built = True

  def run_create_repo(self):
    self.build_other_image()
    cmd = ['docker', 'run', '-e', 'CREATEREPO=1',
           '-v', '%s:/home/dev/rpmbuild/RPMS' % self.rpm_dir_docker,
           '-v', '%s:/home/dev/rpmbuild/SRPMS' % self.srpm_dir_docker,
           self.dockerfile_other_imagename]
    self.logger.debug(cmd_to_str(cmd))
    with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
      Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait(0)

  def run_spectool(self):
    self.build_other_image()
    cmd = ['docker', 'run', '-i', '-e', 'SPECTOOL=1',
           '-v', '%s:/home/dev/rpmbuild/SOURCES' % self.source_dir_docker,
           self.dockerfile_other_imagename]
    self.logger.debug(cmd_to_str(cmd))
    return Popen(cmd, stdin=PIPE, stdout=PIPE)


  def check_dependencies(self):
    
    image_name = 'dockrpm_%s_dep_check' % self.spec_name
    
    if not self.args.skip_build:
      self.build_check_dependencies_image(image_name)

    self.run_check_dependencies_image(image_name)

  def build_docker_image(self, image_name):
    self.logger.info('Building docker image for %s' % self.spec_path)
    docker_env = dict(os.environ)

    with open(os.path.join(self.specs_dir, 'cuda'), 'r') as fid:
      if filter(lambda x:self.spec_basename in x, fid.readlines()):
        if self.args.cuda_version is None:
          pid = Popen([self.args.nvcc, '--version'], stdout=PIPE)
          stdout = pid.communicate()[0]
          pid.wait(0)
          cuda_version = stdout.splitlines()[-1].split(' ')[-1][1:]
          cuda_version = StrictVersion(cuda_version)
        else:
          cuda_version = StrictVersion(self.args.cuda_version)

        if self.args.nvidia_version is None:
          pid = Popen(['nvidia-smi', '-q'], stdout=PIPE)
          stdout = pid.communicate()[0]
          pid.wait(0)
          stdout = filter(lambda x:x.startswith('Driver Version'), stdout.splitlines())
          nvidia_version = StrictVersion(stdout[0].split()[3])
        else:
          nvidia_version = StrictVersion(self.args.nvidia_version)

        if cuda_version >= StrictVersion('7.0'):
          docker_env['DOCKRPM_CUDA_INSTALL'] = 'RUN yum install -y ' \
              'http://developer.download.nvidia.com/compute/cuda/repos/rhel7/' \
              'x86_64/cuda-repo-rhel7-7.5-18.x86_64.rpm epel-release && ' \
              'yum install -y cuda.%d-%d' % cuda_version.version[0:2]

        elif cuda_version >= StrictVersion('5.5'): #not 100% sure this works in rhel 7 ;)
          docker_env['DOCKRPM_CUDA_INSTALL'] = 'RUN yum install -y ' \
              'http://developer.download.nvidia.com/compute/cuda/repos/rhel6/' \
              'x86_64/cuda-repo-rhel6-7.5-18.x86_64.rpm epel-release && ' \
              'yum install -y cuda.%d-%d' % cuda_version.version[0:2]
        else:
          raise Exception('Unsupported version of CUDA %s' % cuda_version)

    docker_env['SPEC_BASENAME'] = self.spec_basename
    docker_env['USER_UID'] = str(self.uid)
    docker_env['USER_GID'] = str(self.gid)
    docker_env['RPMBUILD_ARGS'] = ' '.join(self.rpmbuild_args)

    #docker+ the Dockerfile
    self.dockerp(os.path.join(self.code_dir, 'Dockerfile'), self.dockerfile,
                 docker_env)

    #create rpmmacros files if it doesn't exist
    if not os.path.exists(self.rpmmacros_path):
      self.logger.info('No rpmmacros files found. Creating basic rpmmacros file')
      with open(self.rpmmacros_path, 'wb') as fid:
        fid.write('%dist .el7\n')

    #Create curl.bsh file
    with open(self.spec_path, 'r') as fid:
      spec_lines = fid.readlines()
    spec_lines = filter(lambda x: not x.startswith('%include'), spec_lines)

    pid = self.run_spectool()
    curl_lines = pid.communicate(''.join(spec_lines))[0]
    curl_lines = curl_lines.splitlines()
    curl_lines = filter(lambda x:x.startswith('dry run: '), curl_lines)
    curl_lines = map(lambda x:x[len('dry run: '):], curl_lines)
    curl_lines.sort()
    pid.wait(0)
    with open(self.curl_script_path, 'wb') as fid:
      fid.write('#!/usr/bin/env bash\nset -eu\n')
      fid.write('\n'.join(curl_lines))
    os.chmod(self.curl_script_path, 0755)


    cmd = ['docker', 'build', '-f', self.dockerfile, '-t', image_name, 
           self.spec_dir]
    self.logger.debug(cmd_to_str(cmd))
    with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
      Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait(0)

  def run_docker_image(self, image_name, container_name):

    self.logger.info('Running build docker for %s' % self.spec_path)
    
    #clean up incase previous attempt was dirty
    with open(os.devnull, 'w') as fid:
      if not Popen(['docker', 'inspect', container_name], 
                   stdout=fid, stderr=STDOUT).wait():
        cmd = ['docker', 'rm', container_name]
        self.logger.debug(cmd_to_str(cmd))
        with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
          Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait(0)

    docker_options = []
    if self.args.mount_repo:
      docker_options += ['-v', '%s:/repos:ro' % self.args.mount_repo]
    if self.args.mount_gpg:
      docker_options += ['-v', '%s:/gpg:ro' % self.args.mount_gpg]
    if self.args.bash:
      #if interactive bash session then I want tty hooked up and SPEC file synced
      docker_options += ['-t', '-v', '%s:/home/dev/rpmbuild/SPECS/%s' % \
                                     (self.spec_path_docker, self.spec_basename),
                         '-e', 'DOCKRPM_BASH=1']
    elif self.args.skip_build:
      #if skip build, skip build is used to speed things up, but  I want to at
      #least make sure the spec file is up-to-date. read only to prevent accidents
      docker_options += ['-v', '%s:/home/dev/rpmbuild/SPECS/%s:ro' % (self.spec_path_docker, self.spec_basename)]


    cmd = ['docker', 'run', '-i', 
           '-v', '%s:/home/dev/rpmbuild/RPMS' % self.rpm_dir_docker,
           '-v', '%s:/home/dev/rpmbuild/SRPMS' % self.srpm_dir_docker,
           '--name', container_name] + docker_options + self.extra_args + \
           [image_name]
    self.logger.debug(cmd_to_str(cmd))
    if self.args.bash:
      return_value = Popen(cmd).wait()
    else:
      with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
        return_value = Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait()

    if return_value == 0:
      cmd = ['docker', 'rm', container_name]
      with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
        Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait(0)
    else:
      if self.args.debug_on_fail is None and not self.args.bash:
        error_message = 'Build failed on %s. Would you like to enter a debug session? (y/n)' % container_name
        if self.log_level <= logging.CRITICAL:
          self.logger.critical(error_message)
        else:
          print(error_message)
        resume = str(raw_input())
        resume = resume.lower().startswith('y')
      else:
        self.logger.critical('Build failed on %s', container_name)
        resume = self.args.debug_on_fail
      

      if resume:
        cmd = ['docker', 'commit', '-c', 'ENV DOCKRPM_DEBUG=1 DOCKRPM_BASH=1',
               container_name, container_name+'_debug']
        self.logger.debug(cmd_to_str(cmd))
        with PopenRedirect(LoggerFile(self.logger.debug)) as fid:
          return_value = Popen(cmd, stdout=fid.stdout, stderr=STDOUT).wait()
        
        cmd = ['docker', 'run', '-it', 
               '-v', '%s:/home/dev/rpmbuild/RPMS' % self.rpm_dir_docker,
               '-v', '%s:/home/dev/rpmbuild/SRPMS' % self.srpm_dir_docker,
               '-v', '%s:/home/dev/rpmbuild/SPECS/%s' % (self.spec_path_docker, self.spec_basename),
               '--rm', container_name+'_debug']
        self.logger.debug(cmd_to_str(cmd))
        Popen(cmd).wait(0)
      raise Exception('Build failed, try commiting %s and running it to debug' % container_name)


  def main(self, setupLogging=True):
    image_name = 'dockrpm_%s' % self.spec_name
    container_name = image_name +'_build'

    self.setup()

    if self.args.dep_check:
      self.check_dependencies()

    if not self.args.skip_build:
      self.build_docker_image(image_name)

    if not self.args.skip_run:
      self.run_docker_image(image_name, container_name)

    self.logger.info('Build success on %s' % self.spec_path)

if __name__=='__main__':
  DockRpm().main()