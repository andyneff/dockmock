#!/usr/bin/env bash

CUR_DIR=$(dirname ${BASH_SOURCE[0]})

if [ $# -ge 1 -a -f "$1" ]; then
  SPEC_NAME=$1
  shift
elif (( $(ls *.spec | wc -l) == 1 )); then
  SPEC_NAME=$(ls *.spec)
else
  echo "You need to specify a single spec file"
  exit 1
fi

: ${OTHER_OPTS=}
: ${RUN_BASH=}
if [ $# -ge 1 ]; then
  if (( $1 == 1 )); then
    RUN_BASH=bash
  fi
  shift
fi

set -eu

: ${RUN_DEP_CHECK=0}
#Disabled for now

if (( ${RUN_DEP_CHECK} > 0 )); then

  : ${DOCKER_RPM_DEP_CHECK_OPTIONS='-v /etc/yum.repos.d/:/repos:ro'}

  DEP_CHECK=0
  #Dependency checking
  for package in $(cat $SPEC_NAME | docker run -i ${DOCKER_RPM_DEP_CHECK_OPTIONS} --rm andyneff/rpm_dep_check | grep '^Error: No Package found for ' | sed 's/^Error: No Package found for //'); do
    echo "Missing $package"
    DEP_CHECK=1
  done

  if [ ${DEP_CHECK} == 1 ]; then
    echo "Dependency check failed. Need to implement recursive building"
    #Everything in RUN_DEP_CHECK works EXCETPS this recursive part. Haven't architected it yet ;)
  fi
fi

SPEC_BASENAME=$(basename ${SPEC_NAME})
IMAGE_NAME=auto_rpm_builder_${SPEC_BASENAME%.*}
DOCKERFILE_NAME=$(mktemp -p $(pwd)/specs)

cat ${CUR_DIR}/Dockerfile | GID=$(id -g) ${CUR_DIR}/docker+.bsh > DOCKERFILE_NAME

exit 1

docker build ${IMAGE_NAME} specs

mkdir -p rpms srpms

#Auto clean up in case there was a mess left behind. Do not kill because that 
#means that's it is running, which most likely means the user is confused ;)
if docker inspect ${IMAGE_NAME}_build > /dev/null 2>&1; then
  docker rm ${IMAGE_NAME}_build
fi

docker run -it -v $(pwd)/rpms:/home/dev/rpmbuild/RPMS \
               -v $(pwd)/srpms:/home/dev/rpmbuild/SRPMS \
               --name ${IMAGE_NAME}_build "${@}" ${IMAGE_NAME} ${RUN_BASH}

if [ "$?" == "0" ]; then
  docker rm ${IMAGE_NAME}_build
else
  echo "Build failed. Try"
fi